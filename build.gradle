plugins {
    id 'java-library'
}

group 'com.vrouting'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

dependencies {
    // JGraphT dependencies
    implementation 'org.jgrapht:jgrapht-core:1.5.2'
    implementation 'org.jgrapht:jgrapht-ext:1.5.2'
    implementation 'org.jgrapht:jgrapht-io:1.5.2'
    implementation 'org.jgrapht:jgrapht-opt:1.5.2'
    implementation 'org.jgrapht:jgrapht-guava:1.5.2'
    
    // Gson library for JSON parsing
    implementation 'com.google.code.gson:gson:2.8.9'
    
    // Logging - using android compatible logging
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'org.slf4j:slf4j-simple:1.7.36'  // For local testing
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'org.slf4j:slf4j-simple:1.7.32'
    
    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.3'
    // Mockito for mocking in tests
    testImplementation 'org.mockito:mockito-core:4.11.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.11.0'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
}

// Task to build JAR with dependencies
task fatJar(type: Jar) {
    archiveClassifier = 'all'
    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Task to run tests and build JAR
task buildAndTest {
    dependsOn test
    dependsOn fatJar
    tasks.findByName('fatJar').mustRunAfter 'test'
}
