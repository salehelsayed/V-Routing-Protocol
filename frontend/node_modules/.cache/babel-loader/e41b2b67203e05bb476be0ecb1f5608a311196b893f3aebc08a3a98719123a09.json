{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\s\\\\AndroidStudioProjects\\\\V-Routing-Protocol\\\\frontend\\\\src\\\\components\\\\NetworkVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NetworkVisualization = ({\n  networkState\n}) => {\n  _s();\n  const svgRef = useRef();\n  const width = 800;\n  const height = 600;\n  useEffect(() => {\n    if (!networkState || !networkState.nodes) return;\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove();\n\n    // Create force simulation\n    const simulation = d3.forceSimulation(networkState.nodes).force(\"link\", d3.forceLink().id(d => d.id)).force(\"charge\", d3.forceManyBody().strength(-300)).force(\"center\", d3.forceCenter(width / 2, height / 2));\n\n    // Create links between nodes in the same cluster\n    const links = [];\n    networkState.nodes.forEach(node => {\n      if (node.cluster) {\n        networkState.nodes.filter(n => n.cluster === node.cluster && n.id !== node.id).forEach(target => {\n          links.push({\n            source: node.id,\n            target: target.id\n          });\n        });\n      }\n    });\n\n    // Draw links\n    const link = svg.append(\"g\").selectAll(\"line\").data(links).enter().append(\"line\").attr(\"stroke\", \"#999\").attr(\"stroke-opacity\", 0.6).attr(\"stroke-width\", 2);\n\n    // Draw nodes\n    const node = svg.append(\"g\").selectAll(\"circle\").data(networkState.nodes).enter().append(\"circle\").attr(\"r\", 10).attr(\"fill\", d => d.isActive ? d.isClusterHead ? \"#ff4444\" : \"#4444ff\" : \"#999\").call(d3.drag().on(\"start\", dragstarted).on(\"drag\", dragged).on(\"end\", dragended));\n\n    // Add node labels\n    const labels = svg.append(\"g\").selectAll(\"text\").data(networkState.nodes).enter().append(\"text\").text(d => d.id).attr(\"font-size\", \"12px\").attr(\"dx\", 12).attr(\"dy\", 4);\n\n    // Update positions on simulation tick\n    simulation.on(\"tick\", () => {\n      link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n      node.attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n      labels.attr(\"x\", d => d.x).attr(\"y\", d => d.y);\n    });\n\n    // Drag functions\n    function dragstarted(event) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      event.subject.fx = event.subject.x;\n      event.subject.fy = event.subject.y;\n    }\n    function dragged(event) {\n      event.subject.fx = event.x;\n      event.subject.fy = event.y;\n    }\n    function dragended(event) {\n      if (!event.active) simulation.alphaTarget(0);\n      event.subject.fx = null;\n      event.subject.fy = null;\n    }\n    return () => {\n      simulation.stop();\n    };\n  }, [networkState]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: svgRef,\n    width: width,\n    height: height,\n    style: {\n      border: '1px solid #ccc'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n};\n_s(NetworkVisualization, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = NetworkVisualization;\nexport default NetworkVisualization;\nvar _c;\n$RefreshReg$(_c, \"NetworkVisualization\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","NetworkVisualization","networkState","_s","svgRef","width","height","nodes","svg","select","current","selectAll","remove","simulation","forceSimulation","force","forceLink","id","d","forceManyBody","strength","forceCenter","links","forEach","node","cluster","filter","n","target","push","source","link","append","data","enter","attr","isActive","isClusterHead","call","drag","on","dragstarted","dragged","dragended","labels","text","x","y","event","active","alphaTarget","restart","subject","fx","fy","stop","ref","style","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/s/AndroidStudioProjects/V-Routing-Protocol/frontend/src/components/NetworkVisualization.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\n\nconst NetworkVisualization = ({ networkState }) => {\n    const svgRef = useRef();\n    const width = 800;\n    const height = 600;\n\n    useEffect(() => {\n        if (!networkState || !networkState.nodes) return;\n\n        const svg = d3.select(svgRef.current);\n        svg.selectAll(\"*\").remove();\n\n        // Create force simulation\n        const simulation = d3.forceSimulation(networkState.nodes)\n            .force(\"link\", d3.forceLink().id(d => d.id))\n            .force(\"charge\", d3.forceManyBody().strength(-300))\n            .force(\"center\", d3.forceCenter(width / 2, height / 2));\n\n        // Create links between nodes in the same cluster\n        const links = [];\n        networkState.nodes.forEach(node => {\n            if (node.cluster) {\n                networkState.nodes\n                    .filter(n => n.cluster === node.cluster && n.id !== node.id)\n                    .forEach(target => {\n                        links.push({ source: node.id, target: target.id });\n                    });\n            }\n        });\n\n        // Draw links\n        const link = svg.append(\"g\")\n            .selectAll(\"line\")\n            .data(links)\n            .enter()\n            .append(\"line\")\n            .attr(\"stroke\", \"#999\")\n            .attr(\"stroke-opacity\", 0.6)\n            .attr(\"stroke-width\", 2);\n\n        // Draw nodes\n        const node = svg.append(\"g\")\n            .selectAll(\"circle\")\n            .data(networkState.nodes)\n            .enter()\n            .append(\"circle\")\n            .attr(\"r\", 10)\n            .attr(\"fill\", d => d.isActive ? (d.isClusterHead ? \"#ff4444\" : \"#4444ff\") : \"#999\")\n            .call(d3.drag()\n                .on(\"start\", dragstarted)\n                .on(\"drag\", dragged)\n                .on(\"end\", dragended));\n\n        // Add node labels\n        const labels = svg.append(\"g\")\n            .selectAll(\"text\")\n            .data(networkState.nodes)\n            .enter()\n            .append(\"text\")\n            .text(d => d.id)\n            .attr(\"font-size\", \"12px\")\n            .attr(\"dx\", 12)\n            .attr(\"dy\", 4);\n\n        // Update positions on simulation tick\n        simulation.on(\"tick\", () => {\n            link\n                .attr(\"x1\", d => d.source.x)\n                .attr(\"y1\", d => d.source.y)\n                .attr(\"x2\", d => d.target.x)\n                .attr(\"y2\", d => d.target.y);\n\n            node\n                .attr(\"cx\", d => d.x)\n                .attr(\"cy\", d => d.y);\n\n            labels\n                .attr(\"x\", d => d.x)\n                .attr(\"y\", d => d.y);\n        });\n\n        // Drag functions\n        function dragstarted(event) {\n            if (!event.active) simulation.alphaTarget(0.3).restart();\n            event.subject.fx = event.subject.x;\n            event.subject.fy = event.subject.y;\n        }\n\n        function dragged(event) {\n            event.subject.fx = event.x;\n            event.subject.fy = event.y;\n        }\n\n        function dragended(event) {\n            if (!event.active) simulation.alphaTarget(0);\n            event.subject.fx = null;\n            event.subject.fy = null;\n        }\n\n        return () => {\n            simulation.stop();\n        };\n    }, [networkState]);\n\n    return (\n        <svg ref={svgRef} width={width} height={height} style={{ border: '1px solid #ccc' }} />\n    );\n};\n\nexport default NetworkVisualization;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}